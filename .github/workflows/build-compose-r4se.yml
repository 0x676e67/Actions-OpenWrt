name: build-compose-r4se

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repository:
        description: Use openwrt repository
        required: true
        default: "https://github.com/DHDAXCW/lede-rockchip"
        type: choice
        options:
          - "https://github.com/DHDAXCW/lede-rockchip"
      machine:
        description: 'Compile machine'
        required: true
        default: "10900T"
        type: choice
        options:
        - "10900T"
        - "10850K"
      kmod:
        description: kmod in firmware
        required: true
        default: false
        type: boolean

env:
  REPO_BRANCH: stable
  CONFIG_FILE: build/configs/lean/r4se.config
  DIY_SH: build/scripts/diy-config-r4se.sh
  KMODS_IN_FIRMWARE: ${{ inputs.kmod }}
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  USE_REPO: ${{ inputs.repository }}
  
jobs:

  CompileInitialize:
    runs-on: [self-hosted, Linux, X64, "${{ inputs.machine }}"]
    outputs:
      OPENWRTROOT: ${{ steps.clone.outputs.OPENWRTROOT }}
    steps:

    - name: Initialization Environment
      run: |
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Clone Source Code
       id:clone
      run: |
        df -hT $PWD
        echo "using repository: $USE_REPO"
        git clone -b$REPO_BRANCH $USE_REPO openwrt
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        echo "OPENWRTROOT=$PWD" >> $GITHUB_OUTPUT
        rm -rf .git

    - name: Clone Custom Feeds
      run: |
        cd $OPENWRTROOT
        mkdir customfeeds
        git clone --depth=1 https://github.com/DHDAXCW/packages customfeeds/packages
        git clone --depth=1 https://github.com/DHDAXCW/luci customfeeds/luci
        chmod +x ../build/scripts/*.sh
        ../build/scripts/hook-feeds.sh
  
    - name: Update And install Feeds
      run: | 
        cd $OPENWRTROOT
        chmod +x ../build/scripts/*.sh
        ../build/scripts/feeds_settings.sh
        
    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        cd $OPENWRTROOT
        chmod +x ../build/scripts/*.sh
        ../$DIY_SH
        ../build/scripts/preset-clash-core.sh arm64
        ../build/scripts/preset-terminal-tools.sh
        make defconfig
        
    - name: Download DLL
      id: package
      run: |
        cd $OPENWRTROOT
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        ls -lah dl

  CompileToolchain:
    runs-on: [self-hosted, Linux, X64, "${{ inputs.machine }}"]
    timeout-minutes: 1440
    needs: CompileInitialize
    steps:
    - name: Compile toolchain
      id: compile
      run: | 
        cd ${{needs.CompileInitialize.outputs.OPENWRTROOT}}
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc)
        make toolchain/compile -j$(nproc)
        make target/compile -j$(nproc)
        make diffconfig
  
  CompileFirmware:
    runs-on: [self-hosted, Linux, X64, "${{ inputs.machine }}"]
    timeout-minutes: 1440
    needs: [CompileInitialize, CompileToolchain]

    outputs:
      OPENWRTROOT: ${{ steps.compile.outputs.OPENWRTROOT }}
      PLATFORM: ${{ steps.compile.outputs.PLATFORM }}
      TARGET: ${{ steps.compile.outputs.TARGET }}
      SUBTARGET: ${{ steps.compile.outputs.SUBTARGET }}
      FIRMWARE: ${{ steps.compile.outputs.FIRMWARE }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}
      RELEASE_NAME: ${{ steps.tag.outputs.RELEASE_NAME }}
      RELEASE_TAG: ${{ steps.tag.outputs.RELEASE_TAG }}
      RELEASE_SUCCESS: ${{ steps.tag.outputs.RELEASE_SUCCESS }}

    steps:

    - name: Compile package
      id: compile
      run: |
        cd ${{ needs.CompileInitialize.outputs.OPENWRTROOT }}
        OPENWRTROOT=$(pwd)
        echo "OPENWRTROOT=$OPENWRTROOT" >> $GITHUB_ENV
        echo "OPENWRTROOT=$OPENWRTROOT" >> $GITHUB_OUTPUT
        echo -e "$(nproc) thread compile"
        make package/compile -j$(nproc) || make package/compile -j$(nproc)
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "PLATFORM=$PLATFORM" >> $GITHUB_OUTPUT
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "TARGET=$TARGET" >> $GITHUB_OUTPUT
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_OUTPUT
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_OUTPUT
        echo "COMPILE_STATUS=success" >> $GITHUB_OUTPUT

    - name: Generate Firmware
      if: steps.compile.outputs.COMPILE_STATUS == 'success'
      id: generate
      run: |
        cd build/configs/opkg
        sed -i "s/subtarget/$SUBTARGET/g" distfeeds*.conf
        sed -i "s/target\//$TARGET\//g" distfeeds*.conf
        sed -i "s/platform/$PLATFORM/g" distfeeds*.conf
        cd $OPENWRTROOT
        mkdir -p files/etc/uci-defaults/
        cp ../build/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        mkdir -p files/etc/opkg
        cp ../build/configs/opkg/distfeeds-packages-server.conf files/etc/opkg/distfeeds.conf.server
        mkdir -p files/etc/opkg/keys
        cp ../build/configs/opkg/1035ac73cc4e59e3 files/etc/opkg/keys/1035ac73cc4e59e3
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/snapshots
            cp -r bin/targets files/www/snapshots
            cp ../build/configs/opkg/distfeeds-18.06-local.conf files/etc/opkg/distfeeds.conf
        else
            cp ../build/configs/opkg/distfeeds-18.06-remote.conf files/etc/opkg/distfeeds.conf
        fi
        cp files/etc/opkg/distfeeds.conf.server files/etc/opkg/distfeeds.conf.mirror
        sed -i "s/http:\/\/192.168.123.100:2345\/snapshots/https:\/\/openwrt.cc\/snapshots\/$(date +"%Y-%m-%d")\/lean/g" files/etc/opkg/distfeeds.conf.mirror
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        pushd bin/targets/rockchip/armv8
        rm -rf openwrt-rockchip-armv8.manifest
        rm -rf openwrt-rockchip-armv8-rootfs.tar.gz
        rm -rf config.buildinfo
        rm -rf packages-server.zip
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4se-ext4-sysupgrade.img.gz docker-r4se-ext4-sysupgrade.img.gz
        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4se-squashfs-sysupgrade.img.gz docker-r4se-squashfs-sysupgrade.img.gz
        popd
        make checksum
        mv bin/targets/rockchip/armv8/sha256sums bin/targets/rockchip/armv8/docker-r4se-sha256sums
        echo "GENERATE_STATUS=success"  >> $GITHUB_OUTPUT
        
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
          tag="$TARGET/$SUBTARGET"
          echo "RELEASE_TAG=$tag" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=$(date +"%Y.%m.%d") for $tag" >> $GITHUB_OUTPUT
          echo "RELEASE_SUCCESS=success" >> $GITHUB_OUTPUT

  UploadFirmware:
    runs-on: [self-hosted, Linux, X64, "${{ inputs.machine }}"]
    timeout-minutes: 1440
    needs: [CompileFirmware]

    steps:
  
    - name: Remove Images
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && needs.CompileFirmware.outputs.RELEASE_SUCCESS == 'success'
      run: | 
        MAX_DISK_USAGE="10G"
        CURRENT=$(docker system df --format '{{.Size}}' | head -n1 | sed 's/B$//')
        if (( $(numfmt --from=iec $CURRENT) > $(numfmt --from=iec $MAX_DISK_USAGE) )); then
          docker rmi $(docker images -q) -f
        fi

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: needs.CompileFirmware.outputs.RELEASE_SUCCESS == 'success' && !cancelled() && env.UPLOAD_RELEASE == 'true'
      env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
          name: ${{ needs.CompileFirmware.outputs.RELEASE_NAME }}
          tag_name: ${{ needs.CompileFirmware.outputs.RELEASE_TAG }}
          files: ${{ needs.CompileFirmware.outputs.FIRMWARE }}/*

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
          keep_latest: 20
          delete_tags: true
      env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
